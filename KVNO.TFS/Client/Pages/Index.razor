@page "/"

@inject ICollectionService cs;
@inject IProjectService ps;
@inject IWorkItemService ws;

@inject DialogService DialogService;

<PageTitle>Index</PageTitle>

@if(loaded)
{
    <p>Collection Name | Projekt Name | Workitem Title | Workitem Est Time | Workitem Created at | WorkItem Assigned User | Button Open Workitem</p>

    <RadzenDataGrid Data="@WorkItems" TItem="DevOpsWorkItem" AllowFiltering="true" AllowColumnResize="true"
                AllowSorting="true" PageSize="20" AllowPaging="true" ShowPagingSummary="true">
        <Columns>
            <RadzenDataGridColumn TItem="DevOpsWorkItem" Title="Collection Name">
                <Template Context="wi">
                    @GetCollectionName(wi.ProjectId);
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DevOpsWorkItem" Title="Project Name">
                <Template Context="wi">
                    @GetProjectName(wi.ProjectId);
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DevOpsWorkItem" Title="Title">
                <Template Context="wi">
                    @wi.Title
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DevOpsWorkItem" Title="Estimated Time" Width="200px">
                <Template Context="wi">
                    @wi.EstimateTime
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DevOpsWorkItem" Title="Created at" Width="200px">
                <Template Context="wi">
                    @wi.Created
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DevOpsWorkItem" Title="Assigned User" Width="200px">
                <Template Context="wi">
                    @wi.AssignetUser
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DevOpsWorkItem" Title="Action" Width="120px">
                <Template Context="workItem">
                    <RadzenButton Text="Open" Click="args => Open(workItem)" ButtonStyle="ButtonStyle.Danger"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

}
else
{
    <h1>Loading</h1>
}



@code
{
    public List<DevOpsCollection> Collections { get; set; } = new();
    public List<DevOpsProject> Projects { get; set; } = new();
    public List<DevOpsWorkItem> WorkItems { get; set; } = new();

    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        await GetAll();
    }

    public async Task GetAll()
    {

        var cols = await cs.GetCollections();
        if(cols is not null)
        {
            Collections.AddRange(cols);
            foreach (var col in Collections)
            {
                var projects = await ps.GetProjects(col.Name, col.Id);
                if(projects is not null)
                {
                    Projects.AddRange(projects);
                }
            }
            var w = await ws.GetWorkItemsByState("New");
            if(w is not null)
            {
                WorkItems.AddRange(w);
            }
            loaded = true;
        }
    }

    string GetCollectionName(string projectId)
    {
        var project = Projects.FirstOrDefault(x => x.Id.Equals(projectId));
        var collection = Collections.FirstOrDefault(x => x.Id.Equals(project.CollectionId));
        return collection.Name;
    }

    string GetProjectName(string projectId)
    {
        var project = Projects.FirstOrDefault(x => x.Id.Equals(projectId));
        return project.Name;
    }

    async Task Open(DevOpsWorkItem workitem)
    {
        Console.WriteLine("Test");
        await DialogService.OpenAsync("Simple Dialog", x =>@<WorkItemCard WorkItem="workitem"></WorkItemCard>, new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }
}